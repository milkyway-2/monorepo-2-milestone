#!/bin/bash

echo "=== Generating Ethereum-compatible Key Pair ==="

# Create keys directory if it doesn't exist
mkdir -p keys

# Generate private key
echo "Generating private key..."
openssl ecparam -name secp256k1 -genkey -noout -out keys/private.pem

# Extract public key in uncompressed format
echo "Extracting uncompressed public key..."
PUB_UNCOMP_HEX=$(openssl ec -in keys/private.pem -pubout -outform DER | tail -c 65 | xxd -p -c 65)

echo "Private key saved to: keys/private.pem"
echo "Public key (uncompressed): $PUB_UNCOMP_HEX"
echo ""

echo "=== Ethereum Address (raw + checksum) ==="
if ! ETH_INFO=$(
  PUB_UNCOMP_HEX="$PUB_UNCOMP_HEX" python3 - <<'PY'
import os, binascii, sys
from Crypto.Hash import keccak  # requires: pip install pycryptodome

pub_hex = os.environ.get("PUB_UNCOMP_HEX","").strip()
if not pub_hex:
    print("ERROR: Missing PUB_UNCOMP_HEX", file=sys.stderr); sys.exit(1)
if not pub_hex.startswith("04"):
    print("ERROR: Public key is not uncompressed (missing 04 prefix)", file=sys.stderr); sys.exit(1)

# drop 0x04 and keccak256 the raw X||Y
xy_hex = pub_hex[2:]
data = binascii.unhexlify(xy_hex)

k = keccak.new(digest_bits=256); k.update(data)
digest = k.digest()
addr_bytes = digest[-20:]
addr_hex = "0x" + binascii.hexlify(addr_bytes).decode()

def keccak256_bytes(b: bytes) -> bytes:
    k2 = keccak.new(digest_bits=256); k2.update(b); return k2.digest()

# EIP-55 checksum
def to_checksum_address(addr: str) -> str:
    s = addr.lower().replace("0x","")
    kh = keccak256_bytes(s.encode()).hex()
    out = "0x"
    for i, ch in enumerate(s):
        out += ch.upper() if ch.isalpha() and int(kh[i], 16) >= 8 else ch
    return out

print(addr_hex)
print(to_checksum_address(addr_hex))
PY
); then
  echo "Failed to compute address. See error above."
  exit 1
fi

ETH_RAW=$(echo "$ETH_INFO" | sed -n '1p')
ETH_CHECKSUM=$(echo "$ETH_INFO" | sed -n '2p')
echo "Original:    $ETH_RAW"
echo "Checksummed: $ETH_CHECKSUM"
echo ""

# Save the address to a file for easy access
# echo "$ETH_CHECKSUM" > keys/ethereum_address.txt
# echo "Ethereum address saved to: keys/ethereum_address.txt"

# Extract private key in hex format
echo "Extracting private key in hex format..."
PRIVATE_KEY_HEX=$(openssl ec -in keys/private.pem -outform DER | tail -c 32 | xxd -p -c 32)

# Remove the PEM file since we have the hex format
rm keys/private.pem

# Create .env file with all key information
echo "Creating .env file with key information..."
cat > .env << EOF
# Ethereum Key Pair Generated by generate_keys.sh
PRIVATE_KEY_HEX=$PRIVATE_KEY_HEX
PUBLIC_KEY_UNCOMPRESSED=$PUB_UNCOMP_HEX
ETHEREUM_ADDRESS=$ETH_CHECKSUM
EOF

echo "Environment variables saved to: keys/.env"
echo ""
echo "=== Key Summary ==="
echo "Private Key (hex):     $PRIVATE_KEY_HEX"
echo "Public Key (uncomp):   $PUB_UNCOMP_HEX"
echo "Ethereum Address:      $ETH_CHECKSUM"
